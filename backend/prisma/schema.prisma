// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @default(uuid())
  email                 String          @unique
  passwordHash          String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  assets                FileAsset[]
  joinedUserCommunities UserCommunity[]
  ownedCommunities      Community[]     @relation("CommunityOwner")
}

model FileAsset {
  id         String   @id @default(uuid())
  filename   String
  mimeType   String   @map("type")
  s3Key      String
  isPublic   Boolean
  isUploaded Boolean  @default(false) // Indicates if the file has been uploaded to S3
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model Community {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  ownerId     String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  archivedAt  DateTime? // Nullable field for archiving

  owner User @relation("CommunityOwner", fields: [ownerId], references: [id])

  joinedUserCommunities UserCommunity[]
  calendarEvents        CalendarEvent[]
}

model UserCommunity {
  userId      String
  communityId String
  joinedAt    DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id])
  community Community @relation(fields: [communityId], references: [id])

  @@id([userId, communityId])
}

model CalendarEvent {
  id            String    @id @default(uuid())
  title         String
  desc          String?
  location      String?
  startDt       DateTime
  endDt         DateTime
  timezone      String    @default("UTC")
  cancelledAt   DateTime?
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  communityId   String
  community     Community @relation(fields: [communityId], references: [id])
}

model EmailOutbox {
  id           String    @id @default(uuid())
  to           String
  subject      String
  body         String
  sentAt       DateTime?
  error        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
